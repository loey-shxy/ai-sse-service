var r=Object.defineProperty;var o=(i,e,t)=>e in i?r(i,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[e]=t;var u=(i,e,t)=>(o(i,typeof e!="symbol"?e+"":e,t),t);const c=i=>{const e=new ArrayBuffer(i.length);return new Uint8Array(e).set(i),e};class n{constructor(){u(this,"mediaSource");u(this,"audio");u(this,"audioContext");u(this,"sourceBuffer");u(this,"cacheBuffers",[]);u(this,"pauseTimer",null);const e=window.AudioContext;this.audioContext=new e,this.mediaSource=new MediaSource,this.audio=new Audio,this.audio.src=URL.createObjectURL(this.mediaSource),this.audioContextConnect(),this.listenMediaSource()}audioContextConnect(){this.audioContext.createMediaElementSource(this.audio).connect(this.audioContext.destination)}listenMediaSource(){this.mediaSource.addEventListener("sourceopen",()=>{this.sourceBuffer||(this.sourceBuffer=this.mediaSource.addSourceBuffer("audio/mpeg"),this.sourceBuffer.addEventListener("update",()=>{var e,t;if(this.cacheBuffers.length&&!((e=this.sourceBuffer)!=null&&e.updating)){const s=this.cacheBuffers.shift();(t=this.sourceBuffer)==null||t.appendBuffer(s)}this.pauseAudio()}))})}pauseAudio(){const e=this.sourceBuffer.timestampOffset-this.audio.currentTime||0;this.pauseTimer&&clearTimeout(this.pauseTimer),this.pauseTimer=setTimeout(()=>this.audio.pause(),e*1e3+5e3)}playAudio(){setTimeout(()=>{if(this.audio.paused)try{this.audio.play()}catch{this.playAudio()}},1e3)}receiveAudioData(e){var t,s;console.log(e),e.byteLength&&((t=this.sourceBuffer)!=null&&t.updating?this.cacheBuffers.push(e):(s=this.sourceBuffer)==null||s.appendBuffer(e),this.playAudio())}}export{n as A,c as b};
